#!/usr/bin/env python
#
# Author: k2lab.net
# WEB: http://k2lab.net/
#

import sys
import binascii
import socket
import json
import os
import os.path
from optparse import OptionParser


CONFIG_FILE = os.environ['HOME'] + '/.wol/config.json'
DEF_IPADDR = '<broadcast>'
DEF_PORT = 9

_usage = """                                                                      
./wolcmd [options] <MAC address>                                                  
"""
_usage = _usage + "\n\nConfigFile: " + CONFIG_FILE

def get_config(config_f=CONFIG_FILE):
    if os.path.exists(config_f):
        with open(config_f, 'r') as f:
            return json.load(f)
    else:
        return {}

def get_config_names():
    a = []
    for k in get_config().keys():
        a.append(k)
    return a

def get_config_name(name):
    return get_config()[name]

def trim_macaddr(macaddr):
    _map = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']
    addr = ''
    for _s in macaddr.upper():
        if _s in _map:
            addr = addr + _s
    return addr.rjust(12, '0')

def send(parm):
    if 'addr' not in parm: parm.update({'addr':DEF_IPADDR})
    if 'port' not in parm: parm.update({'port':DEF_PORT})
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
    
    mac = trim_macaddr(parm['mac'])
    p = '\xff' * 6 + binascii.unhexlify(mac) * 16
    s.sendto(p, (parm['addr'], parm['port']))
    s.close()

def main():
    parser = OptionParser(usage=_usage)
    parser.add_option("-a", "--addr", help="Default IP address: <broadcat>")
    parser.add_option("-p", "--port", help="Default port: 9 ", type="int")
    (options, args) = parser.parse_args()
    
    
    if len(args) is 0:
        parser.print_help()
        sys.exit()
        addr = '<broadcast>'
    if options.addr:
        addr = options.addr
        port = 9
    if options.port:
        port = options.port

    a = args[0]

    if a == 'config':
        if args[1] == 'list':
            for v in get_config_names():
                print v
        else:
            print "Config:"
            for k, v in get_config().items():
                print '  ', k, ":"
                print '    mac: %(mac)s' % v
    elif a in get_config_names():
        send(get_config_name(a))
    else:
        parm = {'mac': a, 'addr': addr,'port': port}
        send(parm)

if __name__ == '__main__':
    #print get_config()
    main()

